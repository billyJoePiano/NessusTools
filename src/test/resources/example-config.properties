# The below configurations should be adjusted based on the scanner being queried.
# TenaPull will use these settings to connect to the Nessus API and to its own DB.
#
# Each Nessus scanner being queried should have its own configuration file
# with its unique hostname, API keys, DB name, and output directory.
#
# Typically, the hostname, db name, and output directory will be the same name,
# although this isn't a requirement.  However, it is critically important
# that the output directory and db name be unique for each Nessus scanner being queried,
# or else they will overwrite each other's data and possibly cause exceptions at
# TenaPull runtime

# Name settings.  IT IS CRITICALLY IMPORTANT TO MAKE SURE THESE CONFIG VALUES ARE
# UNIQUE FOR EACH NESSUS SCANNER BEING QUERIED BY YOUR TenaPull INSTALLATION!
# For unit tests, it would also be wise to use a separate DB and output directory
api.url.host=mynessusinstallation1.mylan.local
output.dir=/var/log/tenapull/unitTests
db.url.name=unitTests


# These "API keys" are just example place-holders
# You will need to generate API keys from your own Nessus installation and set the below
# properties to the generated keys, so TenaPull can connect to your Nessus API
api.key.access=7a096d3fc77b59d0af8ae08c8585777d82b4bcb064cde30312aa2fa3e9cc788a
api.key.secret=66a168d2b15006a80b79d917a9ec0ac43c6bc22c8302a49e1aef4646fc534687


# Database credentials
db.username=dbUser
db.password=dbPassword


# delete/comment-out client.acceptAnySSL to require SSL/TLS certificates signed by a known CA
client.acceptAnySSL


# Set output.scanner for a custom value in the 'scanner' field in output files.
# By default, TenaPull will use the api.url.host property of this configuration file
# (e.g. "mynessusinstallation1.mylan.local") but this can be overridden using the
# below property

# output.scanner=mynessusinstallation1


# If you know you will only be using one Nessus scanner and wish to
# omit the scanner field altogether, then uncomment output.scanner.omit

# output.scanner.omit


# If the outputs are too long and causing failures/invalid-JSON during Splunk ingestion,
# then uncomment and set output.truncate.  This will truncate very long string fields
# to the specified maximum number of characters, not including the JSON escape character '\'.
# Note that if the truncate length is set to less than 255, it is possible (though unlikely) that some
# fields will still exceed the truncate setting, but will never exceed 255 characters.
# This is because truncation is only applied to strings from lookup tables i.e. Java entities
# which implement the StringLookupPojo interface, via either abstract super-class
# SimpleStringLookupPojo or StringHashLookupPojo. All strings/varchars embedded directly within a
# table/entity (as opposed to a lookup table) are limited to 255 characters (or less in some cases)

# output.truncate=1000



# EVERYTHING BELOW SHOULD BE LEFT ALONE UNDER MOST CIRCUMSTANCES
# ...unless you need a custom configuration for the Nessus API or the DB connection

# Nessus API connection.  Port is optional.  Protocol is required
api.url.protocol=https
api.url.port=8834

# DB connection.  Port is optional.  Protocol and host are required
db.url.protocol=jdbc:mysql
db.url.host=localhost
db.url.port=3306

# JDBC driver class, required
db.driver=com.mysql.cj.jdbc.Driver

# Required.  db.dialect is for Hibernate. You may need to change this if not using mySQL.
# For more info, refer to Hibernate's documentation on dialect configuration.
# Typically, this property would be statically configured in hibernate.cfg.xml,
# but TenaPull dynamically configures it at runtime when first creating the
# SessionFactoryBuilder, using the value provided here
db.dialect=org.hibernate.dialect.MySQLDialect
