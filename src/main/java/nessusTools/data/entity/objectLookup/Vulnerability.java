package nessusTools.data.entity.objectLookup;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.node.*;
import nessusTools.data.deserialize.*;
import nessusTools.data.entity.lookup.*;
import nessusTools.data.entity.template.*;
import nessusTools.data.persistence.*;
import nessusTools.util.*;

import javax.persistence.*;
import java.util.*;


@Entity(name = "Vulnerability")
@Table(name = "vulnerability")
@JsonIgnoreProperties({"id", "host_id"})
public class Vulnerability extends GeneratedIdPojo
        implements MapLookupPojo<Vulnerability>, IdCachingSerializer.NodeCacher<Vulnerability> {

    public static final MapLookupDao<Vulnerability> dao
            = new MapLookupDao<Vulnerability>(Vulnerability.class);

    private Integer count;

    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH})
    @JoinColumn(name = "score_id")
    private VulnerabilityScore score;

    @Column(name = "vuln_index")
    @JsonProperty("vuln_index")
    private Integer vulnIndex;

    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH})
    @JoinColumn(name = "plugin_name_id")
    @JsonProperty("plugin_name")
    private PluginName pluginName;

    private Integer severity;

    @Column(name = "plugin_id")
    @JsonProperty("plugin_id")
    private Integer pluginId; // foreign key for plugin ???????

    @Column(name = "severity_index")
    @JsonProperty("severity_index")
    private Integer severityIndex;

    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH})
    @JoinColumn(name = "cpe_id")
    @JsonProperty("cpe")
    private Cpe cpe;

    private Boolean offline;

    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH})
    @JoinColumn(name="plugin_family_id")
    @JsonProperty("plugin_family")
    private PluginFamily pluginFamily;

    private Integer snoozed;

    @Transient
    @JsonIgnore
    @Override
    public void _prepare() {
        this.__prepare();
    }

    public Integer getCount() {
        return count;
    }

    public void setCount(Integer count) {
        this.count = count;
    }

    public Cpe getCpe() {
        return cpe;
    }

    public void setCpe(Cpe cpe) {
        this.cpe = cpe;
    }

    public Boolean getOffline() {
        return offline;
    }

    public void setOffline(Boolean offline) {
        this.offline = offline;
    }

    public PluginFamily getPluginFamily() {
        return pluginFamily;
    }

    public void setPluginFamily(PluginFamily pluginFamily) {
        this.pluginFamily = pluginFamily;
    }

    public Integer getPluginId() {
        return pluginId;
    }

    public void setPluginId(Integer pluginId) {
        this.pluginId = pluginId;
    }

    public PluginName getPluginName() {
        return pluginName;
    }

    public void setPluginName(PluginName pluginName) {
        this.pluginName = pluginName;
    }

    public VulnerabilityScore getScore() {
        return score;
    }

    public void setScore(VulnerabilityScore score) {
        this.score = score;
    }

    public Integer getSeverity() {
        return severity;
    }

    public void setSeverity(Integer severity) {
        this.severity = severity;
    }

    public Integer getSeverityIndex() {
        return severityIndex;
    }

    public void setSeverityIndex(Integer severityIndex) {
        this.severityIndex = severityIndex;
    }

    public Integer getSnoozed() {
        return snoozed;
    }

    public void setSnoozed(Integer snoozed) {
        this.snoozed = snoozed;
    }

    public Integer getVulnIndex() {
        return vulnIndex;
    }

    public void setVulnIndex(Integer vulnIndex) {
        this.vulnIndex = vulnIndex;
    }

    @Override
    public void _set(Vulnerability o) {
        this.__set(o);
        this.count = o.count;
        this.score = o.score;
        this.vulnIndex = o.vulnIndex;
        this.pluginName = o.pluginName;
        this.severity = o.severity;
        this.pluginId = o.pluginId;
        this.severityIndex = o.severityIndex;
        this.cpe = o.cpe;
        this.offline = o.offline;
        this.pluginFamily = o.pluginFamily;
        this.snoozed = o.snoozed;
    }

    @Override
    public boolean _match(Vulnerability o) {
        if (o == this) return true;
        return o != null
                && Objects.equals(this.count, o.count)
                && Objects.equals(this.score, o.score)
                && Objects.equals(this.vulnIndex, o.vulnIndex)
                && Objects.equals(this.pluginName, o.pluginName)
                && Objects.equals(this.severity, o.severity)
                && Objects.equals(this.pluginId, o.pluginId)
                && Objects.equals(this.severityIndex, o.severityIndex)
                && Objects.equals(this.cpe, o.cpe)
                && Objects.equals(this.offline, o.offline)
                && Objects.equals(this.pluginFamily, o.pluginFamily)
                && Objects.equals(this.snoozed, o.snoozed)
                && Objects.equals(this.getExtraJson(), o.getExtraJson());
    }

    @Transient
    @JsonIgnore
    @Override
    public Map<String, Object> _getSearchMap() {
        return MakeMap.of(new Object[] {
                "count", this.count,
                "score", this.score,
                "vulnIndex", this.vulnIndex,
                "pluginName", this.pluginName,
                "severity", this.severity,
                "pluginId", this.pluginId,
                "severityIndex", this.severityIndex,
                "cpe", this.cpe,
                "offline", this.offline,
                "pluginFamily", this.pluginFamily,
                "snoozed", this.snoozed,
                "extraJson", this.getExtraJson()
            });
    }

    @Transient
    @JsonIgnore
    private IdCachingSerializer.MainCachedNode<Vulnerability> cachedNode;

    public IdCachingSerializer.MainCachedNode<Vulnerability> getCachedNode() {
        return this.cachedNode;
    }

    public void setCachedNode(IdCachingSerializer.MainCachedNode<Vulnerability> cachedNode) {
        if (cachedNode != null) {
            assert cachedNode.getId() == this.getId() && cachedNode.represents(this);
        }
        this.cachedNode = cachedNode;
    }

    public static JsonSerializer<Vulnerability>
            getCachingSerializer(JsonSerializer<Vulnerability> defaultSerializer, ObjectMapper mapper) {

        return IdCachingSerializer.getIdCachingSerializer(defaultSerializer, mapper);
    }

    public static JsonSerializer<Vulnerability>
            getCacheResetSerializer(JsonSerializer<Vulnerability> defaultSerializer, ObjectMapper mapper) {

        return IdCachingSerializer.getCacheResetSerializer(defaultSerializer, mapper);
    }

    @Override
    public ObjectNode toJsonNode() {
        if (this.cachedNode == null){
            if (this.getId() == 0) {
                return super.toJsonNode();
            }
            this.cachedNode = IdCachingSerializer.getOrCreateNodeCache(this);
        }
        return this.cachedNode.getNode();
    }

    @Override
    public String toJsonString() throws JsonProcessingException {
        if (this.cachedNode == null){
            if (this.getId() == 0) {
                return super.toJsonString();
            }
            this.cachedNode = IdCachingSerializer.getOrCreateNodeCache(this);
        }
        return this.cachedNode.getString();
    }
}
